{"ast":null,"code":"var _jsxFileName = \"/home/grem15/Code/StrangersThings/src/Posts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport APIFetch from './api';\nimport NewPostForm from './NewPostForm';\nimport Post from './Post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Posts = props => {\n  _s();\n\n  const [posts, setPosts] = useState([]);\n  const token = props.token;\n  const [showCreatePost, setShowCreatePost] = useState(false);\n\n  const fetchPosts = () => {\n    Promise.all([APIFetch({\n      url: \"posts/\",\n      token: token\n    })]).then(([response]) => {\n      setPosts(response.data.posts);\n    });\n  };\n\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [token ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      onClick: () => {\n        setShowCreatePost(!showCreatePost);\n      },\n      children: \"Show/Hide create new post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 23\n    }, this) : null, showCreatePost ? /*#__PURE__*/_jsxDEV(NewPostForm, {\n      token: token,\n      fetchPosts: fetchPosts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 23\n    }, this) : null, posts.map(post => {\n      return /*#__PURE__*/_jsxDEV(Post, {\n        post: post\n      }, post._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 16\n      }, this);\n    })]\n  }, void 0, true);\n};\n\n_s(Posts, \"kwMAECctfGIcWw+GVL7eDYtQm1I=\");\n\n_c = Posts;\nexport default Posts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["/home/grem15/Code/StrangersThings/src/Posts.js"],"names":["React","useEffect","useState","APIFetch","NewPostForm","Post","Posts","props","posts","setPosts","token","showCreatePost","setShowCreatePost","fetchPosts","Promise","all","url","then","response","data","map","post","_id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,QAAP,MAAqB,OAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;;AAEA,MAAMC,KAAK,GAAEC,KAAD,IACZ;AAAA;;AACI,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAiBP,QAAQ,CAAC,EAAD,CAA/B;AACA,QAAMQ,KAAK,GAACH,KAAK,CAACG,KAAlB;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAoCV,QAAQ,CAAC,KAAD,CAAlD;;AAEA,QAAMW,UAAU,GAAC,MACjB;AACIC,IAAAA,OAAO,CAACC,GAAR,CAAY,CAACZ,QAAQ,CACrB;AACIa,MAAAA,GAAG,EAAC,QADR;AAEIN,MAAAA,KAAK,EAACA;AAFV,KADqB,CAAT,CAAZ,EAMCO,IAND,CAMM,CAAC,CAACC,QAAD,CAAD,KACN;AACIT,MAAAA,QAAQ,CAACS,QAAQ,CAACC,IAAT,CAAcX,KAAf,CAAR;AACH,KATD;AAUH,GAZD;;AAcAP,EAAAA,SAAS,CAAC,MACV;AACIY,IAAAA,UAAU;AACb,GAHQ,EAGP,EAHO,CAAT;AAKA,sBAAO;AAAA,eAAGH,KAAK,gBAAG;AAAI,MAAA,OAAO,EAAE,MAAI;AAACE,QAAAA,iBAAiB,CAAC,CAACD,cAAF,CAAjB;AAAmC,OAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH,GAA2F,IAAnG,EACNA,cAAc,gBAAG,QAAC,WAAD;AAAa,MAAA,KAAK,EAAED,KAApB;AAA2B,MAAA,UAAU,EAAEG;AAAvC;AAAA;AAAA;AAAA;AAAA,YAAH,GAAwD,IADhE,EAENL,KAAK,CAACY,GAAN,CAAWC,IAAD,IACX;AACI,0BAAO,QAAC,IAAD;AAAqB,QAAA,IAAI,EAAEA;AAA3B,SAAWA,IAAI,CAACC,GAAhB;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAHA,CAFM;AAAA,kBAAP;AAOH,CAhCD;;GAAMhB,K;;KAAAA,K;AAkCN,eAAeA,KAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport APIFetch from './api';\nimport NewPostForm from './NewPostForm';\nimport Post from './Post';\n\nconst Posts=(props)=>\n{\n    const [posts,setPosts]=useState([]);\n    const token=props.token;\n    const [showCreatePost, setShowCreatePost]=useState(false);\n\n    const fetchPosts=()=>\n    {\n        Promise.all([APIFetch(\n        {\n            url:\"posts/\",\n            token:token\n        }\n        )])\n        .then(([response])=>\n        {\n            setPosts(response.data.posts);\n        });\n    }\n\n    useEffect(()=>\n    {\n        fetchPosts();\n    },[])\n\n    return <>{token ? <h2 onClick={()=>{setShowCreatePost(!showCreatePost)}}>Show/Hide create new post</h2> : null}\n    {showCreatePost ? <NewPostForm token={token} fetchPosts={fetchPosts}/>:null}\n    {posts.map((post)=>\n    {\n        return <Post key={post._id} post={post}/>\n    })}\n    </>\n}\n\nexport default Posts;"]},"metadata":{},"sourceType":"module"}