{"ast":null,"code":"const API_URL = \"https://strangers-things.herokuapp.com/api/2105-SJS-RM-WEB-PT/\";\n\nconst APIFetch = async ({\n  url: url,\n  method: method,\n  token: token,\n  body: body\n}) => {\n  try {\n    const response = await fetch(API_URL + url, {\n      method: method ? method.toUpperCase() : \"GET\",\n      headers: {\n        'Content-Type': 'application/json',\n        ...(token && {\n          'Authorization': 'Bearer ' + token\n        })\n      },\n      body: JSON.stringify({\n        user: {\n          username: userInput,\n          password: passInput\n        }\n      })\n    });\n    return await response.json();\n  } catch (error) {\n    throw error;\n  }\n};\n\n_c = APIFetch;\nexport async function fetchPosts(token) {\n  try {\n    const response = await fetch(API_URL + \"posts/\");\n    const jdata = await response.json();\n    return jdata.data.posts;\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function fetchUserData(token) {\n  try {\n    const response = await fetch(API_URL + \"users/me/\", {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token\n      }\n    });\n    const jdata = await response.json();\n    return jdata;\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function fetchLogin(userInput, passInput, type) {\n  try {\n    const response = await fetch(API_URL + \"users/\" + type, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: userInput,\n          password: passInput\n        }\n      })\n    });\n    const jdata = await response.json();\n    return jdata;\n  } catch (error) {\n    throw error;\n  }\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"APIFetch\");","map":{"version":3,"sources":["/home/grem15/Code/StrangersThings/src/api.js"],"names":["API_URL","APIFetch","url","method","token","body","response","fetch","toUpperCase","headers","JSON","stringify","user","username","userInput","password","passInput","json","error","fetchPosts","jdata","data","posts","fetchUserData","fetchLogin","type"],"mappings":"AAAA,MAAMA,OAAO,GAAC,gEAAd;;AAGA,MAAMC,QAAQ,GAAG,OACb;AACIC,EAAAA,GAAG,EAACA,GADR;AAEIC,EAAAA,MAAM,EAACA,MAFX;AAGIC,EAAAA,KAAK,EAACA,KAHV;AAIIC,EAAAA,IAAI,EAACA;AAJT,CADa,KAOjB;AACI,MACA;AACI,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACP,OAAO,GAACE,GAAT,EAC5B;AACIC,MAAAA,MAAM,EAACA,MAAM,GAAGA,MAAM,CAACK,WAAP,EAAH,GAAwB,KADzC;AAEIC,MAAAA,OAAO,EACP;AACQ,wBAAe,kBADvB;AAEQ,YAAIL,KAAK,IAAG;AAAC,2BAAgB,YAAUA;AAA3B,SAAZ;AAFR,OAHJ;AAOQC,MAAAA,IAAI,EAACK,IAAI,CAACC,SAAL,CACD;AACIC,QAAAA,IAAI,EACJ;AACIC,UAAAA,QAAQ,EAACC,SADb;AAEIC,UAAAA,QAAQ,EAACC;AAFb;AAFJ,OADC;AAPb,KAD4B,CAA5B;AAkBA,WAAO,MAAMV,QAAQ,CAACW,IAAT,EAAb;AAEH,GAtBD,CAuBA,OAAMC,KAAN,EACA;AACI,UAAMA,KAAN;AACH;AACJ,CAnCD;;KAAMjB,Q;AAqCN,OAAO,eAAekB,UAAf,CAA0Bf,KAA1B,EACP;AACI,MACA;AACI,UAAME,QAAQ,GAAG,MAAMC,KAAK,CAACP,OAAO,GAAC,QAAT,CAA5B;AACA,UAAMoB,KAAK,GAAG,MAAMd,QAAQ,CAACW,IAAT,EAApB;AACA,WAAOG,KAAK,CAACC,IAAN,CAAWC,KAAlB;AACH,GALD,CAMA,OAAMJ,KAAN,EACA;AACI,UAAMA,KAAN;AACH;AACJ;AAED,OAAO,eAAeK,aAAf,CAA6BnB,KAA7B,EACP;AACI,MACA;AACI,UAAME,QAAQ,GAAG,MAAMC,KAAK,CAACP,OAAO,GAAC,WAAT,EAC5B;AACIS,MAAAA,OAAO,EACP;AACI,wBAAgB,kBADpB;AAEI,yBAAiBL;AAFrB;AAFJ,KAD4B,CAA5B;AAQA,UAAMgB,KAAK,GAAC,MAAMd,QAAQ,CAACW,IAAT,EAAlB;AACA,WAAOG,KAAP;AAEH,GAbD,CAcA,OAAMF,KAAN,EACA;AACI,UAAMA,KAAN;AACH;AACJ;AAED,OAAO,eAAeM,UAAf,CAA0BV,SAA1B,EAAoCE,SAApC,EAA8CS,IAA9C,EACP;AACI,MACA;AACI,UAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAACP,OAAO,GAAC,QAAR,GAAiByB,IAAlB,EAC5B;AACItB,MAAAA,MAAM,EAAC,MADX;AAEIM,MAAAA,OAAO,EACP;AACI,wBAAe;AADnB,OAHJ;AAMIJ,MAAAA,IAAI,EAACK,IAAI,CAACC,SAAL,CACD;AACIC,QAAAA,IAAI,EACJ;AACIC,UAAAA,QAAQ,EAACC,SADb;AAEIC,UAAAA,QAAQ,EAACC;AAFb;AAFJ,OADC;AANT,KAD4B,CAA5B;AAiBA,UAAMI,KAAK,GAAG,MAAMd,QAAQ,CAACW,IAAT,EAApB;AACA,WAAOG,KAAP;AACH,GArBD,CAsBA,OAAMF,KAAN,EACA;AACI,UAAMA,KAAN;AACH;AACJ","sourcesContent":["const API_URL=\"https://strangers-things.herokuapp.com/api/2105-SJS-RM-WEB-PT/\"\n\n\nconst APIFetch = async (\n    {\n        url:url,\n        method:method,\n        token:token,\n        body:body\n    })=>\n{\n    try\n    {\n        const response = await fetch(API_URL+url,\n        {\n            method:method ? method.toUpperCase():\"GET\",\n            headers:\n            {\n                    'Content-Type':'application/json',\n                    ...(token &&{'Authorization':'Bearer '+token}),\n            },\n                body:JSON.stringify(\n                    {\n                        user:\n                        {\n                            username:userInput,\n                            password:passInput\n                        }\n                    }\n                )\n        });\n        return await response.json();\n\n    }\n    catch(error)\n    {\n        throw error;\n    }\n}\n\nexport async function fetchPosts(token)\n{\n    try\n    {\n        const response = await fetch(API_URL+\"posts/\");\n        const jdata = await response.json();\n        return jdata.data.posts;\n    }\n    catch(error)\n    {\n        throw error;\n    }\n}\n\nexport async function fetchUserData(token)\n{\n    try\n    {\n        const response = await fetch(API_URL+\"users/me/\",\n        {\n            headers:\n            {\n                'Content-Type': 'application/json',\n                'Authorization': token\n            }\n        });\n        const jdata=await response.json();\n        return jdata;\n\n    }\n    catch(error)\n    {\n        throw error\n    }\n}\n\nexport async function fetchLogin(userInput,passInput,type)\n{\n    try\n    {\n        const response = await fetch(API_URL+\"users/\"+type,\n        {\n            method:\"POST\",\n            headers:\n            {\n                'Content-Type':'application/json'\n            },\n            body:JSON.stringify(\n                {\n                    user:\n                    {\n                        username:userInput,\n                        password:passInput\n                    }\n                }\n            )\n        });\n        const jdata = await response.json();\n        return jdata;\n    }\n    catch(error)\n    {\n        throw error;\n    }\n}"]},"metadata":{},"sourceType":"module"}