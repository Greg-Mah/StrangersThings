{"ast":null,"code":"var _jsxFileName = \"/home/grem15/Code/StrangersThings/src/UserForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport APIFetch from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UserForm = props => {\n  _s();\n\n  const setToken = props.setToken;\n  const setUser = props.setUser;\n  const type = props.type;\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [message, setMessage] = useState(\"Enter username and password to \" + type + \".\");\n  const [hidden, setHidden] = useState(true);\n  useEffect(() => {\n    if (confirmPassword) {\n      if (confirmPassword !== password) {\n        let output = \"Password match o=matching character, x=wrong character, _=missing character, *=extra character:\";\n\n        for (let i = 0; i < password.length || i < confirmPassword.length; i++) {\n          if (i < password.length) {\n            if (i < confirmPassword.length) {\n              if (password.charAt(i) === confirmPassword.charAt(i)) {\n                output += \"o\";\n              } else {\n                output += \"x\";\n              }\n            } else {\n              output += \"_\";\n            }\n          } else {\n            output += \"*\";\n          }\n        }\n\n        setMessage(output);\n      } else {\n        setMessage(\"Passwords match!\");\n      }\n    } else {\n      setMessage(\"Enter username and password to \" + type + \".\");\n    }\n  }, [confirmPassword]);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: event => {\n      event.preventDefault();\n      APIFetch({\n        url: \"users/\" + type,\n        method: \"POST\",\n        body: {\n          user: {\n            username: username,\n            password: password\n          }\n        }\n      }).then(response => {\n        if (response.success) {\n          setToken(response.data.token);\n          setMessage(response.data.message);\n          setUser(username);\n        } else {\n          setMessage(response.error.message);\n        }\n      });\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/account/\" + type + \"/\",\n        children: type.toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      required: true,\n      type: \"text\",\n      placeholder: \"Username\",\n      value: username,\n      onChange: event => {\n        setUsername(event.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      required: true,\n      type: hidden ? \"password\" : \"text\",\n      placeholder: \"Password\",\n      value: password,\n      onChange: event => {\n        setPassword(event.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: hidden,\n        onChange: () => {\n          setHidden(!hidden);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"Hide Password\",\n        children: \"Hide Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this), type === \"register\" ? /*#__PURE__*/_jsxDEV(\"input\", {\n      required: true,\n      type: \"password\",\n      placeholder: \"Confirm Password\",\n      value: confirmPassword,\n      onChange: event => {\n        setConfirmPassword(event.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: !username || !password || type === \"register\" && password !== confirmPassword,\n      children: type\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 12\n  }, this);\n};\n\n_s(UserForm, \"3mx1SPZ3dRYDp3abp/3uiPI62So=\");\n\n_c = UserForm;\nexport default UserForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserForm\");","map":{"version":3,"sources":["/home/grem15/Code/StrangersThings/src/UserForm.js"],"names":["React","useEffect","useState","Link","APIFetch","UserForm","props","setToken","setUser","type","username","setUsername","password","setPassword","confirmPassword","setConfirmPassword","message","setMessage","hidden","setHidden","output","i","length","charAt","event","preventDefault","url","method","body","user","then","response","success","data","token","error","toUpperCase","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport APIFetch from './api';\n\n\nconst UserForm =(props)=>\n{\n    const setToken=props.setToken;\n    const setUser=props.setUser;\n    const type=props.type;\n\n    \n    const [username,setUsername]=useState(\"\");\n    const [password,setPassword]=useState(\"\");\n    const [confirmPassword,setConfirmPassword]=useState(\"\");\n    const [message,setMessage]=useState(\"Enter username and password to \"+type+\".\");\n    const [hidden,setHidden]=useState(true);\n    \n    useEffect(()=>\n    {\n        if(confirmPassword)\n        {\n            if(confirmPassword!==password)\n            {\n                let output=\"Password match o=matching character, x=wrong character, _=missing character, *=extra character:\";\n                for(let i=0;i<password.length||i<confirmPassword.length;i++)\n                {\n                    if(i<password.length)\n                    {\n                        if(i<confirmPassword.length)\n                        {\n                            if(password.charAt(i)===confirmPassword.charAt(i))\n                            {\n                                output+=\"o\";\n                            }\n                            else\n                            {\n                                output+=\"x\";\n                            }\n                        }\n                        else\n                        {\n                            output+=\"_\";\n                        }\n                    }\n                    else\n                    {\n                        output+=\"*\";\n                    }\n                }\n                setMessage(output);\n            }\n            else\n            {\n                setMessage(\"Passwords match!\")\n            }\n        }\n        else\n        {\n            setMessage(\"Enter username and password to \"+type+\".\");\n        }\n    },[confirmPassword])\n\n\n    return <form onSubmit={(event)=>\n    {\n        event.preventDefault();\n        APIFetch(\n            {\n                url:\"users/\"+type,\n                method:\"POST\",\n                body:\n                {\n                    user:\n                    {\n                        username:username,\n                        password:password\n                    }\n                }\n            }\n        )\n        .then((response)=>\n        {\n            if(response.success)\n            {\n                setToken(response.data.token);\n                setMessage(response.data.message);\n                setUser(username);\n            }\n            else\n            {\n                setMessage(response.error.message);\n            }\n        })\n        \n    }}>\n        <h2><Link to={\"/account/\"+type+\"/\"}>{type.toUpperCase()}</Link></h2>\n        <input required type=\"text\" placeholder=\"Username\" value={username} onChange={(event)=>\n        {\n            setUsername(event.target.value);\n        }}/>\n        <input required type={hidden ? \"password\": \"text\"} placeholder=\"Password\" value={password} onChange={(event)=>\n        {\n            setPassword(event.target.value);\n        }}/>\n        <div><input type=\"checkbox\" checked={hidden}  onChange={()=>\n        {\n            setHidden(!hidden);\n        }}/>\n        <label htmlFor=\"Hide Password\">Hide Password</label></div>\n        {type===\"register\" ?\n        <input required type=\"password\" placeholder=\"Confirm Password\" value={confirmPassword} onChange={(event)=>\n        {\n            setConfirmPassword(event.target.value);\n        }}/>\n        \n        :null}\n        \n        <p>{message}</p>\n\n        <button type=\"submit\" disabled={!username||!password||(type===\"register\"&&password!==confirmPassword)}>{type}</button>\n    </form>\n}\n\nexport default UserForm;\n"]},"metadata":{},"sourceType":"module"}